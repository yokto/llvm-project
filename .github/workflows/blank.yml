# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Install ninja
        run: sudo apt-get install -y ninja-build clang

      - uses: robinraju/release-downloader@v1.9
        with:
          repository: yokto/elf
          fileName: headers.tar.xz
          tarBall: false
          extract: true
          latest: true
      
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          ls
          mkdir -p _zwolf/github__com_xlibc_2024/common
          tar -C _zwolf/github__com_xlibc_2024/common --strip-components=1 -xf headers.tar.xz
          mkdir -p build_linux
          cd build_linux
          CC=clang CXX=clang cmake ../llvm \
                "-DLLVM_ENABLE_PROJECTS=clang;lld" \
                "-DCMAKE_BUILD_TYPE=Release" \
                "-DCMAKE_C_COMPILER=clang" \
                "-DDEFAULT_SYSROOT=/_zwolf" \
                "-DCMAKE_INSTALL_PREFIX=/_zwolf/llvm-linux" \
                "-DCMAKE_INSTALL_BINDIR=x86_64/bin" \
                "-DLLVM_TOOLS_INSTALL_DIR=x86_64/bin" \
                "-DCMAKE_INSTALL_INCLUDEDIR=common/include" \
                "-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-linux-zwolf" \
                "-DLLVM_TARGETS_TO_BUILD=X86;AArch64" \
                "-DLLVM_INCLUDE_BENCHMARKS=OFF" \
                "-DLLVM_ENABLE_TERMINFO=OFF" \
                "-DLIBCXX_USE_COMPILER_RT=ON" \
                "-DLIBCXXABI_USE_COMPILER_RT=ON" \
                "-DCLANG_DEFAULT_LINKER=lld" \
                "-DCLANG_BUILD_TOOLS:BOOL=ON" \
                "-DCLANG_ENABLE_ARCMT=OFF" \
                "-DCOMPILER_RT_INCLUDE_TESTS=OFF" \
                "-DCLANG_DEFAULT_RTLIB=compiler-rt" \
                "-DCLANG_DEFAULT_UNWINDLIB=libunwind" \
                "-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON" \
                "-DCLANG_DEFAULT_CXX_STDLIB=libc++" \
                "-DLIBCXX_ENABLE_DEBUG_MODE=ON" \
                "-G" "Ninja"
          ninja
          ninja install
